import { expect } from "chai";
import { ConwayGrid } from "./ConwayGrid";
import { µ } from "../utils";

describe("day 17 - Grid", () => {
    describe("part 1", () => {
        const startGrid = ConwayGrid.parse3D(`
            .#.
            ..#
            ###
        `);

        describe("evolve(1)", () => {
            const grid = startGrid.evolve(1);

            parseExpected(`
                z=-1
                #..
                ..#
                .#.

                z=0
                #.#
                .##
                .#.

                z=1
                #..
                ..#
                .#.
            `).forEach(({ z, expected }) => {
                it(`z=${z}`, () => {
                    expect(grid.z(z)).to.equal(expected);
                });
            });
        });
        describe("evolve(2)", () => {
            const grid = startGrid.evolve(2);

            parseExpected(`
                z=-2
                .....
                .....
                ..#..
                .....
                .....

                z=-1
                ..#..
                .#..#
                ....#
                .#...
                .....

                z=0
                ##...
                ##...
                #....
                ....#
                .###.

                z=1
                ..#..
                .#..#
                ....#
                .#...
                .....

                z=2
                .....
                .....
                ..#..
                .....
                .....
            `).forEach(({ z, expected }) => {
                it(`z=${z}`, () => {
                    expect(grid.z(z)).to.equal(expected);
                });
            });
        });
        it.skip("countActive", () => {
            const grid = ConwayGrid.parse3D(
                `
                    .#.
                    ..#
                    ###
                `
            ).evolve(6);

            expect(grid.countActive()).to.equal(112);
        });
    });
    describe("part 2", () => {
        const startGrid = ConwayGrid.parse4D(`
            .#.
            ..#
            ###
        `);

        describe("evolve(1)", () => {
            const grid = startGrid.evolve(1);

            parseExpected(`
                z=-1, w=-1
                #..
                ..#
                .#.
                
                z=0, w=-1
                #..
                ..#
                .#.
                
                z=1, w=-1
                #..
                ..#
                .#.
                
                z=-1, w=0
                #..
                ..#
                .#.
                
                z=0, w=0
                #.#
                .##
                .#.
                
                z=1, w=0
                #..
                ..#
                .#.
                
                z=-1, w=1
                #..
                ..#
                .#.
                
                z=0, w=1
                #..
                ..#
                .#.
                
                z=1, w=1
                #..
                ..#
                .#.
            `).forEach(({ z, w, expected }) => {
                it(`z=${z}, w=${w}`, () => {
                    expect(grid.zw(z, w)).to.equal(expected);
                });
            });
        });
        describe("evolve(2)", () => {
            const grid = startGrid.evolve(2);

            parseExpected(`
                z=-2, w=-2
                .....
                .....
                ..#..
                .....
                .....
                
                z=-1, w=-2
                .....
                .....
                .....
                .....
                .....
                
                z=0, w=-2
                ###..
                ##.##
                #...#
                .#..#
                .###.
                
                z=1, w=-2
                .....
                .....
                .....
                .....
                .....
                
                z=2, w=-2
                .....
                .....
                ..#..
                .....
                .....
                
                z=-2, w=-1
                .....
                .....
                .....
                .....
                .....
                
                z=-1, w=-1
                .....
                .....
                .....
                .....
                .....
                
                z=0, w=-1
                .....
                .....
                .....
                .....
                .....
                
                z=1, w=-1
                .....
                .....
                .....
                .....
                .....
                
                z=2, w=-1
                .....
                .....
                .....
                .....
                .....
                
                z=-2, w=0
                ###..
                ##.##
                #...#
                .#..#
                .###.
                
                z=-1, w=0
                .....
                .....
                .....
                .....
                .....
                
                z=0, w=0
                .....
                .....
                .....
                .....
                .....
                
                z=1, w=0
                .....
                .....
                .....
                .....
                .....
                
                z=2, w=0
                ###..
                ##.##
                #...#
                .#..#
                .###.
                
                z=-2, w=1
                .....
                .....
                .....
                .....
                .....
                
                z=-1, w=1
                .....
                .....
                .....
                .....
                .....
                
                z=0, w=1
                .....
                .....
                .....
                .....
                .....
                
                z=1, w=1
                .....
                .....
                .....
                .....
                .....
                
                z=2, w=1
                .....
                .....
                .....
                .....
                .....
                
                z=-2, w=2
                .....
                .....
                ..#..
                .....
                .....
                
                z=-1, w=2
                .....
                .....
                .....
                .....
                .....
                
                z=0, w=2
                ###..
                ##.##
                #...#
                .#..#
                .###.
                
                z=1, w=2
                .....
                .....
                .....
                .....
                .....
                
                z=2, w=2
                .....
                .....
                ..#..
                .....
                .....
            `).forEach(({ z, w, expected }) => {
                it(`z=${z}, w=${w}`, () => {
                    expect(grid.zw(z, w)).to.equal(expected);
                });
            });
        });
        it.skip("countActive", () => {
            const grid = startGrid.evolve(6);

            expect(grid.countActive()).to.equal(848);
        });
    });
});

function parseExpected(text: string) {
    return text
        .split("\n")
        .map(µ.trim)
        .join("\n")
        .split("\n\n")
        .map((block) => {
            const [label, ...expectedGrid] = block
                .trim()
                .split("\n")
                .map(µ.trim);
            const zMatch = label.match(/z=(-?\d+)/)!;
            const wMatch = label.match(/w=(-?\d+)/)!;
            return {
                z: parseInt(zMatch[1]),
                w: wMatch ? parseInt(wMatch[1]) : 0,
                expected: expectedGrid.join("\n"),
            };
        });
}
